-------------------------------------------------------------------------------------------------------------
-- Спавн вертолета. На основе АМК
--Параметры вызова: 
--позиция x,
--позиция y,
--позиция z, 
--левел вертекс, 
--гейм вертекс,
--файл логики без расширения .ltx. !!!ДОЛЖЕН находиться в config\scripts\heli!!!
-------------------------------------------------------------------------------------------------------------
function heli(posx,posy,posz,lvid,gvid,logic)
	local obj = alife():create("helicopter",vector():set(posx,posy,posz),lvid,gvid)
	local packet = net_packet()
	obj:STATE_Write(packet)

	-- свойства cse_alife_object
	local game_vertex_id = packet:r_u16()
	local cse_alife_object__unk1_f32 = packet:r_float()
	local cse_alife_object__unk2_s32 = packet:r_s32()
	local level_vertex_id = packet:r_s32()
	local object_flags = packet:r_s32()
	local custom_data = packet:r_stringZ()
	local story_id = packet:r_s32()
	local cse_alife_object__unk3_s32 = packet:r_s32()

	-- свойства cse_visual
	local model_visual = packet:r_stringZ()
	local cse_visual__unk1_u8 = packet:r_u8()
	-- свойства cse_motion
	local motion_name = packet:r_stringZ()

	-- свойства cse_ph_skeleton
	local skeleton_name = packet:r_stringZ()
	local cse_ph_skeleton__unk1_u8 = packet:r_u8()
	local cse_ph_skeleton__unk2_u16 = packet:r_u16()
		
	-- свойства cse_alife_helicopter
	local cse_alife_helicopter__unk1_sz = packet:r_stringZ()
	local engine_sound = packet:r_stringZ()

	--устанавливаем логику
	custom_data = "[logic]\ncfg = scripts\\heli\\"..logic..".ltx"

	-- теперь заполняем нужные параметры
	-- свойства cse_alife_object
	packet:w_begin(game_vertex_id)
	packet:w_float(cse_alife_object__unk1_f32)
	packet:w_s32(cse_alife_object__unk2_s32)
	packet:w_s32(level_vertex_id)
	object_flags = bit_not(5)	-- ~5 = 0xfffffffa
	packet:w_s32(object_flags)
	packet:w_stringZ(custom_data)
	packet:w_s32(-1)
	packet:w_s32(cse_alife_object__unk3_s32)

	-- свойства cse_visual
	packet:w_stringZ(model_visual)
	packet:w_u8(cse_visual__unk1_u8)
	
	-- свойства cse_motion
	packet:w_stringZ(motion_name)		
	
	-- свойства cse_ph_skeleton
	skeleton_name = "idle"
	packet:w_stringZ(skeleton_name)
	packet:w_u8(cse_ph_skeleton__unk1_u8)
	packet:w_u16(cse_ph_skeleton__unk2_u16)

	-- свойства cse_alife_helicopter
	cse_alife_helicopter__unk1_sz = "idle"
	engine_sound = "alexmx\\helicopter"
	packet:w_stringZ(cse_alife_helicopter__unk1_sz)
	packet:w_stringZ(engine_sound)

	-- считываем скорректированные параметры
	packet:r_seek(0)
	obj:STATE_Read(packet, packet:w_tell())


	return obj
end

-------------------------------------------------------------------------------------------------------------
-- Спавн БТР. На основе АМК
--Параметры вызова: 
--позиция x,
--позиция y,
--позиция z, 
--левел вертекс, 
--гейм вертекс,
--файл логики без расширения .ltx. !!!ДОЛЖЕН находиться в config\scripts\btr!!!
-------------------------------------------------------------------------------------------------------------
function btr(posx,posy,posz,lvid,gvid,logic)
	local obj = alife():create("vehicle_btr",vector():set(posx,posy,posz),lvid,gvid)
	local packet = net_packet()
	obj:STATE_Write(packet)

	-- свойства cse_alife_object
	local game_vertex_id = packet:r_u16()
	local cse_alife_object__unk1_f32 = packet:r_float()
	local cse_alife_object__unk2_s32 = packet:r_s32()
	local level_vertex_id = packet:r_s32()
	local object_flags = packet:r_s32()
	local custom_data = packet:r_stringZ()
	local story_id = packet:r_s32()
	local cse_alife_object__unk3_s32 = packet:r_s32()

	-- свойства cse_visual
	local model_visual = packet:r_stringZ()
	local cse_visual__unk1_u8 = packet:r_u8()

	-- свойства cse_ph_skeleton
	local skeleton_name = packet:r_stringZ()
	local cse_ph_skeleton__unk1_u8 = packet:r_u8()
	local cse_ph_skeleton__unk2_u16 = packet:r_u16()
	local health = packet:r_float()
	
	--устанавливаем логику
	custom_data = "[logic]\ncfg = scripts\\btr\\"..logic..".ltx"

	-- теперь заполняем нужные параметры
	-- свойства cse_alife_object
	packet:w_begin(game_vertex_id)
	packet:w_float(cse_alife_object__unk1_f32)
	packet:w_s32(cse_alife_object__unk2_s32)
	packet:w_s32(level_vertex_id)
	object_flags = bit_not(5)	-- ~5 = 0xfffffffa
	packet:w_s32(object_flags)
	packet:w_stringZ(custom_data)
	packet:w_s32(-1)
	packet:w_s32(cse_alife_object__unk3_s32)

	-- свойства cse_visual
	packet:w_stringZ(model_visual)
	packet:w_u8(cse_visual__unk1_u8)
	
	-- свойства cse_ph_skeleton
	skeleton_name = "idle"
	packet:w_stringZ(skeleton_name)
	packet:w_u8(cse_ph_skeleton__unk1_u8)
	packet:w_u16(cse_ph_skeleton__unk2_u16)
	health = 1
	packet:w_float(health)
	
	-- считываем скорректированные параметры
	packet:r_seek(0)
	obj:STATE_Read(packet, packet:w_tell())


	return obj
end

function item(item,posx,posy,posz,lvid,gvid)
	local obj = alife():create(item,vector():set(posx,posy,posz),lvid,gvid)
	return obj
end

function inv(item,npc_id)
	if npc_id == nil then
		npc_id = db.actor:id()
	end
	local obj = alife():create(item,vector():set(0,0,0),1,1,npc_id)
	return obj
end

function heli_pair(posx,posy,posz,lvid,gvid,logic)
local heli_a = heli(posx,posy,posz,lvid,gvid,logic)
local heli_b = heli_copy(vector():set(posx+25,posy,posz),lvid,gvid,heli_a.id)
heli_target.add_heli_pair(heli_a,heli_b)
end

function heli_pair2(posx,posy,posz,lvid,gvid,logic)
local heli_a = heli(posx,posy,posz,lvid,gvid,logic)
local heli_b = heli(posx+25,posy,posz,lvid,gvid,"test_heli2")
heli_target.add_heli_pair(heli_a,heli_b)
end

function heli_copy(pos,lvid,gvid,id,logic)
	--читаем данные из прототипа
	local prototype = alife():object(id)
	local packet1 = net_packet()
	prototype:STATE_Write(packet1)

	-- свойства cse_alife_object
	local game_vertex_id1 = packet1:r_u16()
	local cse_alife_object1__unk1_f32 = packet1:r_float()
	local cse_alife_object1__unk2_s32 = packet1:r_s32()
	local level_vertex_id1 = packet1:r_s32()
	local object_flags1 = packet1:r_s32()
	local custom_data1 = packet1:r_stringZ()

	local obj = alife():create("helicopter",pos,lvid,gvid)
	local packet = net_packet()
	obj:STATE_Write(packet)

	-- свойства cse_alife_object
	local game_vertex_id = packet:r_u16()
	local cse_alife_object__unk1_f32 = packet:r_float()
	local cse_alife_object__unk2_s32 = packet:r_s32()
	local level_vertex_id = packet:r_s32()
	local object_flags = packet:r_s32()
	local custom_data = packet:r_stringZ()
	local story_id = packet:r_s32()
	local cse_alife_object__unk3_s32 = packet:r_s32()

	-- свойства cse_visual
	local model_visual = packet:r_stringZ()
	local cse_visual__unk1_u8 = packet:r_u8()
	-- свойства cse_motion
	local motion_name = packet:r_stringZ()

	-- свойства cse_ph_skeleton
	local skeleton_name = packet:r_stringZ()
	local cse_ph_skeleton__unk1_u8 = packet:r_u8()
	local cse_ph_skeleton__unk2_u16 = packet:r_u16()
		
	-- свойства cse_alife_helicopter
	local cse_alife_helicopter__unk1_sz = packet:r_stringZ()
	local engine_sound = packet:r_stringZ()

	--устанавливаем логику
	game_vertex_id = game_vertex_id1
	level_vertex_id = level_vertex_id1
	object_flags = object_flags1
	if not logic then
		custom_data = custom_data1
	else
		custom_data = "[logic]\ncfg = scripts\\heli\\"..logic..".ltx"
	end

	-- теперь заполняем нужные параметры
	-- свойства cse_alife_object
	packet:w_begin(game_vertex_id)
	packet:w_float(cse_alife_object__unk1_f32)
	packet:w_s32(cse_alife_object__unk2_s32)
	packet:w_s32(level_vertex_id)
	object_flags = bit_not(5)	-- ~5 = 0xfffffffa
	packet:w_s32(object_flags)
	packet:w_stringZ(custom_data)
	packet:w_s32(-1)
	packet:w_s32(cse_alife_object__unk3_s32)

	-- свойства cse_visual
	packet:w_stringZ(model_visual)
	packet:w_u8(cse_visual__unk1_u8)
	
	-- свойства cse_motion
	packet:w_stringZ(motion_name)		
	
	-- свойства cse_ph_skeleton
	skeleton_name = "idle"
	packet:w_stringZ(skeleton_name)
	packet:w_u8(cse_ph_skeleton__unk1_u8)
	packet:w_u16(cse_ph_skeleton__unk2_u16)

	-- свойства cse_alife_helicopter
	cse_alife_helicopter__unk1_sz = "idle"
	engine_sound = "alexmx\\helicopter"
	packet:w_stringZ(cse_alife_helicopter__unk1_sz)
	packet:w_stringZ(engine_sound)

	-- считываем скорректированные параметры
	packet:r_seek(0)
	obj:STATE_Read(packet, packet:w_tell())


	return obj
end
