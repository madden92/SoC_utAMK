class "evaluator_anomaly" (property_evaluator)

function evaluator_anomaly:__init(storage, npc, name) super(nil, name)
	self.st = storage
	self.npc=npc
	self.called=false
end

local holdtime={}
local stucktime={}
local laststate={}
local rdelta={}

function vec2str(v)
	if v.x and v.y and v.z then
		return v.x .. ";" .. v.y .. ";" .. v.z
	else
		return "not a vector"
	end
end

-- stan spokojny
local error_prob = {
	novice = {[clsid.zone_bfuzz_s] = 3,
			[clsid.zone_galant_s] = 3,
			[clsid.zone_mosquito_bald] = 1,
			[clsid.zone_mincer_s] = 3 },
	experienced = {[clsid.zone_bfuzz_s] = 1,
			[clsid.zone_galant_s] = 1,
			[clsid.zone_mosquito_bald] = 1,
			[clsid.zone_mincer_s] = 1 },
	veteran = {[clsid.zone_bfuzz_s] = 0,
			[clsid.zone_galant_s] = 0,
			[clsid.zone_mosquito_bald] = 0,
			[clsid.zone_mincer_s] = 0 },
	master = {[clsid.zone_bfuzz_s] = 0,
			[clsid.zone_galant_s] = 0,
			[clsid.zone_mosquito_bald] = 0,
			[clsid.zone_mincer_s] = 0 } 
		}

-- stan bojowy
local error_prob_fight = {
	novice = {[clsid.zone_bfuzz_s] = 8,
			[clsid.zone_galant_s] = 8,
			[clsid.zone_mosquito_bald] = 2,
			[clsid.zone_mincer_s] = 8 },
	experienced = {[clsid.zone_bfuzz_s] = 3,
			[clsid.zone_galant_s] = 3,
			[clsid.zone_mosquito_bald] = 2,
			[clsid.zone_mincer_s] = 3 },
	veteran = {[clsid.zone_bfuzz_s] = 0,
			[clsid.zone_galant_s] = 0,
			[clsid.zone_mosquito_bald] = 0,
			[clsid.zone_mincer_s] = 0 },
	master = {[clsid.zone_bfuzz_s] = 0,
			[clsid.zone_galant_s] = 0,
			[clsid.zone_mosquito_bald] = 0,
			[clsid.zone_mincer_s] = 0 }
		}


function evaluator_anomaly:evaluate()
	local nid=self.npc:id()
	if laststate[nid]==nil then
		laststate[nid]=false
	end
	if stucktime[nid]==nil then 
		stucktime[nid]={} 
	end
	if rdelta[nid]==nil then
		rdelta[nid]={}
	end
	if self.mgr == nil then
		self.mgr = self.object:motivation_action_manager()
	end
	if self.mgr:evaluator(xr_evaluators_id.sidor_wounded_base) and 
					self.mgr:evaluator(xr_evaluators_id.sidor_wounded_base):evaluate() then
		-- ¿eby unikn¹æ sytuacji, gdy ranny le¿¹cy obok anomalii, po wyleczeniu zaczyna j¹ ignorowaæ.
		return false
	end
	-- wy³¹czamy Krug³owa spod dzia³ania ca³ego systemu - inaczej nie przejdzie pod tunelem przed Jantarem
	if self.npc:profile_name() == "bar_ecolog_professor" then
		--u3_utils.printf("anomaly_evader for "..self.npc:profile_name())
		return false
	end
	
-------------------------------------------------------------------
-- Tutaj mo¿na sprawdziæ dostêpnoœæ detektora, np. tak:
-- local hasdetector1=false
-- for i=1,self.npc:object_count,1 do
--  if self.npc:object(i):section()=="detector_simple" then
--    hasdetector1=true
--    break
--  end
-- end
-- Jeœli nie ma detektora, zwracamy false, NPC nie mo¿e stwierdziæ obecnoœci anomalii
-- if not hasdetector1 then
--    return false
-- end
-- Mo¿na te¿ najpierw sprawdziæ wartoœæ get_nearest_anomaly i dopiero wtedy
-- decydowaæ, czy j¹ stalker widzi, czy nie. Zmienna cls zawiera CLSID anomalii.
-------------------------------------------------------------------
	local error_tbl
	-- ró¿nicujemy zdolnoœæ zauwa¿ania anomalii od stanu - spokoju lub walki
	if self.mgr:evaluator(stalker_ids.property_enemy):evaluate() then 
		error_tbl=error_prob_fight
	else
		error_tbl=error_prob
	end
	-- anomaly_holder.enumerate_anoms() 
	if holdtime[nid]==nil or time_global()>holdtime[nid] then
		holdtime[nid]=time_global()+500
		local hasanom, anomid, pos, cls, dist, radius, sect_anom = anomaly_holder.get_nearest_anomaly(self.npc)
		local visradius
		-- Jeœli NPC ju¿ widzia³ anomaliê, zwiêkszamy jej widocznoœæ o jeden metr, 
		-- ¿eby unikn¹æ zbyt czêstego prze³¹czania schematów
		if hasanom then
			if rdelta[nid][anomid]==nil then
				rdelta[nid][anomid]=1
			end
			visradius=radius+rdelta[nid][anomid]
			if laststate[nid] then
				visradius=visradius+1
			end
		end
		if hasanom and dist<visradius then
			-- u3_utils.printf(self.npc:name()  .. " at " .. dist)
		-- Sprawdzamy, czy NPC nie wisi ju¿ zbyt d³ugo przy anomalii
			if stucktime[nid][anomid]==nil or stucktime[nid][anomid]<time_global()-120000 then
		-- Dajemy mu 60 sekund na wydostanie siê z anomalii
				stucktime[nid][anomid]=time_global()+60000
				rdelta[nid][anomid]=1
		-- Sprawdzamy, czy znalaz³ anomaliê
				local errortbl=error_tbl[ranks.get_obj_rank_name(self.npc)]
				if errortbl then
					local errorrate=errortbl[cls]
					if errorrate and math.random(0,100)<errorrate then
		-- Stalker ssie... dajemy mu anomaliê na ignore
						u3_utils.printf(self.npc:name()  .. " sucks")
						stucktime[nid][anomid]=time_global()-1
					end
				end
			end
			if stucktime[nid][anomid]<time_global() and dist>radius*0.9 then
		-- To by by³o na tyle, goœciu... twój czas min¹³ - idŸ, gdzie chcesz.
				laststate[nid]=false
			else
				laststate[nid]=true
			end
		else
			laststate[nid]=false
		end
	end
	return laststate[nid]
end


class "action_evade_anomaly" (action_base)
function action_evade_anomaly:__init (npc_name,action_name, storage, char_ini) super (nil, action_name)
	--  u3_utils.printf("action_evade_anomaly init")
	self.a = storage
end

local can_rethink={}
local reverse={}
local npcpostime={}

function action_evade_anomaly:initialize()
	action_base.initialize(self)
	self.object:set_desired_position()
	self.object:set_desired_direction()
	self.object:set_detail_path_type(move.line)
	self.object:set_path_type(game_object.level_path)
	self.object:movement_enabled(true)
	self.object:set_body_state(move.standing)
	self.object:set_movement_type(move.walk)
	self.prefdir=self.object:direction()

	--[[
	if math.random(0,2)<1 then
	state_mgr.set_state( self.object, "assault_fire" )
	else
	state_mgr.set_state( self.object, "raid_fire" )
	end
	]]--

	state_mgr.set_state(self.object, "raid")

	npcpostime[self.object:id()]={pos=self.object:position(),time=time_global()+4000}
end

function veceq(v1,v2)
	return math.abs(v1.x-v2.x)<0.5 and 
		math.abs(v1.y-v2.y)<0.5 and
		math.abs(v1.z-v2.z)<0.5
end

function action_evade_anomaly:execute ()
	--  u3_utils.printf("action execute " .. self.object:name())
	action_base.execute(self)
	local nid=self.object:id()
	if can_rethink[nid]==nil or can_rethink[nid]<time_global() then
		local flag,anomid,anpos,cls,dist,radius,sect_anom=anomaly_holder.get_nearest_anomaly(self.object,self.prefdir)
		if flag then
			rdelta[nid][anomid] = 1
			if veceq(self.object:position(),npcpostime[nid].pos) and time_global()>npcpostime[nid].time then
				reverse[nid]=not reverse[nid]
				if rdelta[nid][anomid] == nil then
					rdelta[nid][anomid] = 1
				end
				--rdelta[nid][anomid]=rdelta[nid][anomid] + 0.2
				rdelta[nid][anomid]=rdelta[nid][anomid] + 0.1
			elseif not veceq(self.object:position(),npcpostime[nid].pos) then
				npcpostime[nid]={pos=self.object:position(),time=time_global()+4000}
			end

			local anvec=vector():set(anpos):sub(self.object:position())
			anvec.y=0
			anvec:normalize()
			local mydir=self.prefdir
			local newdir
			local angle=math.random(80,100)
			if dist<radius*0.9 then
				angle=math.random(120,240)
				self.object:set_movement_type(move.run)
				reverse[nid]=false
			end
			if reverse[nid] then
				angle=-angle
			end
			if mydir.x*anvec.z-mydir.z*anvec.x<0 then
				newdir=vector_rotate_y(anvec,angle)
			else
				newdir=vector_rotate_y(anvec,-angle)
			end
			--    u3_utils.printf(self.object:name() .. " new dir " .. vec2str(newdir))
			local vertex_id=level.vertex_in_direction(self.object:level_vertex_id(),newdir,1)
			--    u3_utils.printf("rethink "..self.object:name() .. " " .. vertex_id .. " " .. anomid)
			can_rethink[self.object:id()]=time_global()+500
			utils.send_to_nearest_accessible_vertex(self.object,vertex_id)
		end
		--    xr_sound.set_sound_play(self.object, "reac_story")
	end
end

function action_evade_anomaly:finalize ()
	action_base.finalize(self)
end

function add_to_binder(object, char_ini, scheme, section, st)
	local manager = object:motivation_action_manager()
	local properties={}
	properties["wounded"] = xr_evaluators_id.sidor_wounded_base

	-- Evaluators
	manager:add_evaluator   (1099, evaluator_anomaly(st,object,"evaluator_amonaly"))

	-- Actions
	local action = action_evade_anomaly(object:name(),"action_evade_anomaly", st, char_ini)
	action:add_precondition   (world_property(stalker_ids.property_alive, true))
	--  action:add_precondition   (world_property(stalker_ids.property_enemy, false))
	action:add_precondition   (world_property(properties["wounded"], false))
	action:add_precondition   (world_property(1099, true))
	action:add_effect (world_property(1099, false))
	manager:add_action (10032, action)

	action = manager:action (xr_actions_id.alife) 
	action:add_precondition   (world_property(1099, false))  
	action = manager:action (stalker_ids.action_combat_planner) 
	action:add_precondition   (world_property(1099, false))  
	--  action = manager:action (stalker_ids.action_search_enemy) 
	--  action:add_precondition   (world_property(1099,    false))  
end

function set_evade(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
end

function reset_evade(npc, scheme, st, section)
end
