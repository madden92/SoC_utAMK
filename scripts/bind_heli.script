
function bind( obj )
	u3_utils.printf("Binding helicopter id = %d", obj:id())
	local ini = obj:spawn_ini()
	if ini and ini:section_exist("logic") then
		obj:bind_object( heli_binder( obj, ini ) )
	end
end

---------------------------------------------------------------------------------------------
-- helicopters binder
-- cholerne wiertalioty :P
---------------------------------------------------------------------------------------------
class "heli_binder" ( object_binder )

function heli_binder:__init(obj, ini) super(obj)
	self.ini			= ini
	self.initialized 	= false
	self.loaded			= false
end

function heli_binder:reload( section )
	object_binder.reload( self, section )
end

function heli_binder:reinit()
	object_binder.reinit( self )

	u3_utils.printf("heli_binder:reinit()")

	db.storage[self.object:id()] = {}
	self.st = db.storage[self.object:id()]
	self.id = self.object:id()

	self.heliObject = self.object:get_helicopter()

	self.object:set_callback( callback.helicopter_on_point, self.on_point, self )
	self.object:set_callback( callback.helicopter_on_hit,   self.on_hit,   self )
	--self.object:set_callback( callback.hit,   self.hit_callback,   self )

	self.st.combat = heli_combat.heli_combat( self.object, self.heliObject )
	self.st.combat.lasthealth = get_heli_health( self.heliObject, self.st )

	self.last_hit_snd_timeout = 0

	local ltx = system_ini()

	self.flame_start_health = utils.cfg_get_number( ltx, "helicopter", "flame_start_health", self.object, true )

	self.st.flame_start_snd = xr_sound.get_sound_object("heli_explosion", "random")

	-- na wypadek sejwa
	self.st.last_alt = self.heliObject:GetRealAltitude()
	self.st.alt_check_time = time_global() + 1000
end

function heli_binder:update( delta )
	object_binder.update( self, delta )

	
--	u3_utils.printf("heli_binder update")
--	u3_utils.printf("%d", self.object:level_vertex_light(db.actor:level_vertex_id()))

	if not self.initialized and db.actor then
		self.initialized = true
		xr_logic.initialize_obj( self.object, self.st, self.loaded, db.actor, modules.stype_heli )
	end

	self.object:info_clear()

	if self.st.active_section ~= nil then
		xr_logic.issue_event( self.object, self.st[self.st.active_scheme], "update", delta )
	end

	local active_section = db.storage[self.object:id()].active_section
	if active_section then
		self.object:info_add('section -- ' .. active_section)
	end

	self:check_health()
end

function heli_binder:net_spawn( data )

	if not object_binder.net_spawn( self, data ) then
		return false
	end

	db.add_obj( self.object )
	db.add_heli( self.object )

	if (news_main and news_main.on_heli_seen and self.object) then
		news_main.on_heli_seen(self.object)
	end

	return true
end

function heli_binder:net_destroy()

	db.del_obj( self.object )
	db.del_heli( self.object )

	object_binder.net_destroy( self )

end

function heli_binder:net_save_relevant()
	return true
end

function heli_binder:save( packet )
	object_binder.save( self, packet )
	u3_utils.printf("heli_binder: save")
	xr_logic.save_obj( self.object, packet )
	self.st.combat:save( packet )
end

function heli_binder:load( packet )
	self.loaded = true
	--u3_utils.printf("generic_object_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load( self, packet )
	u3_utils.printf("heli_binder: load")
	xr_logic.load_obj( self.object, packet )
	self.st.combat:load(packet)
end

function heli_binder:check_health()
	local heli = self.heliObject

--	u3_utils.printf("heli health: %d", heli:GetfHealth())

	if not heli.m_dead then
		local health = get_heli_health(self.heliObject, self.st)

		if health < self.flame_start_health and not heli.m_flame_started then
			heli_start_flame( self.object )

			heli_snd.play_snd( self.st, heli_snd.snd_damaged, 3 )
		end

		-- blackhawk is down!
		if health <= 0.005 then
			heli_die(self.object)
			heli_snd.play_snd(self.st, heli_snd.snd_down, 4)
		end
	end
end

------------------------------ callbacks ---------------------------------

function heli_binder:on_hit( power, impulse, hit_type, enemy_id )
	local health_loss = self.st.combat.lasthealth - self.heliObject:GetfHealth()
	if hit_type == 8 then
		if impulse <= 20 then
			local hit_taken, ap = redefine_hit(power, health_loss)
			self.st.combat.lasthealth = self.st.combat.lasthealth - hit_taken
		end
	else
		self.st.combat.lasthealth = self.st.combat.lasthealth - health_loss
	end

	self.heliObject:SetfHealth(self.st.combat.lasthealth)
	u3_utils.printf("heli_binder: hit callback")

	local enemy = level.object_by_id( enemy_id )
	local enemy_cls_id = get_clsid( enemy )

	-- jesli strzelil aktor lub stalker, zrob z niego wroga
	if (enemy_cls_id == clsid.actor or enemy_cls_id == clsid.script_stalker) then
		heli_target.update_pair_hit (self.object:id(), enemy, enemy_id)
		if self.st.hit then
			xr_logic.issue_event( self.object, self.st.hit, "hit_callback", self.object, power, nil, enemy, nil )
		end
	end
	if self.st.combat.lasthealth < self.flame_start_health and self.st.combat.lasthealth > 0.005 and not self.heliObject.m_flame_started then
		if not self.flame_started then
			heli_target.update_pair_critical_hit (self.object:id(), enemy_id)

			self.flame_started = true
		end
	end

	if self.last_hit_snd_timeout < time_global() then
		heli_snd.play_snd( self.st, heli_snd.snd_hit, 2 )
		self.last_hit_snd_timeout = time_global() + math.random( 4000, 8000 )
	end
end

function heli_binder:on_point( distance, position, path_idx )
	if self.st.active_section ~= nil then
		xr_logic.issue_event( self.object, self.st[self.st.active_scheme], "waypoint_callback", self.object, nil, path_idx )
	end
end

--------------------------------------------------------------------------
-- wyliczamy powage postrzalu
--------------------------------------------------------------------------
function redefine_hit(power, health_loss)
	local lucky_hit_chance = 0.005
	local fire_hit_immunity = 0.005
	local area -- strefa postrzalu
	local hit_chance -- szansa trafienia w cos waznego
	local hit_immunity -- czesc uderzenia idaca w zniszczenie
	local ap_chance = 8*power - 5.7 -- prawdopodobienstwo penetracji postrzalem. power < 1.1 prawdopodobnie nic nie zrobi, > 1.6 przebija na 100%

	local hit = 0
	if math.abs(0.1*power - health_loss) <= 0.0001*health_loss then 
		area = "pilot"
		hit_chance = 0.01 -- trafienie pilota raczej trudne...
		hit_immunity = 2.5 --  ...ale jak juz trafisz, to zapewne zabijesz
	elseif math.abs(0.2*power - health_loss) <= 0.0001*health_loss then
		area = "bprop"
		hit_chance = 1 -- poszycie
		hit_immunity = 0.8
	elseif math.abs(0.3*power - health_loss) <= 0.0001*health_loss then 
		area = "fprop"
		hit_chance = 1 -- poszycie
		hit_immunity = 0.8
	elseif math.abs(0.4*power - health_loss) <= 0.0001*health_loss then 
		area = "cocpit"
		hit_chance = 0.15 -- osprzet, aparatura
		hit_immunity = 0.8 -- ...wzmocniony i ochraniany
	elseif math.abs(0.5*power - health_loss) <= 0.0001*health_loss then 
		area = "tail"
		hit_chance = 0.1 -- trafic silnik rotora... no, jest sloniety. raczej niemozliwe
		hit_immunity = 0.2 -- stal...
	elseif math.abs(0.6*power - health_loss) <= 0.0001*health_loss then 
		area = "main" -- najwazniejsze elementy
		hit_chance = 0.2 -- silnik jest spory, ale strzelajac z dolu trudno sie do niego przebic kulka 
		hit_immunity = 0.4 -- niby wazne, ale... wszystkie elementy sa zdublowane ;)
	else 
		area = "non_lethal" -- hm, fajna dziurka. Nawet ladnie sie komponuje z kamuflazem :P
		hit_chance = 0
		hit_immunity = 0
	end

	if math.random() < ap_chance and math.random() < hit_chance then -- uszkodzony pancerz, uszkodzony wazny element
		hit = power * fire_hit_immunity * hit_immunity
		if math.random() < lucky_hit_chance then
			hit = hit*10
		end
	end
	return hit
end


function get_heli_health(heli, st)
	local health
	if st.invulnerable then
		health = heli:GetfHealth()
	else
		health = heli:GetfHealth()
		if health < 0 then
			heli:SetfHealth( 0 )
			health = 0
		end
	end
	return health
end

function is_heli_alive( obj )
	return get_heli_health( obj:get_helicopter(), db.storage[obj:id()] ) > 0.005
end

function heli_start_flame( obj )
	obj:get_helicopter():StartFlame()
	db.storage[obj:id()].flame_start_snd:play( obj )
	if (news_main and news_main.on_heli_flame and obj) then
		news_main.on_heli_flame(obj)
	end
end

function heli_die( obj )
	local heli = obj:get_helicopter()
	local st   = db.storage[obj:id()]

	heli:Die()

	db.del_heli( obj )
	heli_target.update_pair_death(obj:id())
	
	st.last_alt       = heli:GetRealAltitude()
	st.alt_check_time = time_global() + 1000

	if (news_main and news_main.on_heli_die and obj) then
		news_main.on_heli_die(obj)
	end

end

-- to, co tygryski lubia najbardziej.... :D
function heli_blow_up( obj )
	local heli = obj:get_helicopter()
	local st   = db.storage[obj:id()]

	heli:Die()
	heli:Explode()

	db.del_heli( obj )
	heli_target.update_pair_death(obj:id())

	st.last_alt       = heli:GetRealAltitude()
	st.alt_check_time = time_global() + 1000
end
