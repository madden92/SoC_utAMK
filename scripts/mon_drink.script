------------------------------------
-- Модуль "Пьянчуга".
-- Created by Monnoroch.
-- 09.09.09
------------------------------------

class "evaluator_drink" (property_evaluator)
function evaluator_drink:__init(npc,name,storage) super (nil,name)
	self.st = storage
	self.st.time_f = system_ini():r_float("alife","time_factor")
	self.st.rand = math.random(1,3)
end
function evaluator_drink:evaluate()
	local npc = self.object
	if self.delay and self.delay >= time_global() then
		return self.enb or false
	end
	if not self.enb and state_mgr.get_state(npc) == "eat_vodka" then
		self.enb = true
		if not self.t_t then
			if self.st.rand == 1 then
				self.t_t = (1000*60*60)
			elseif self.st.rand == 2 then
				self.t_t = (1000*60*30)
			elseif self.st.rand == 3 then
				self.t_t = 1
			end
		end
		if not self.time_t then
			self.time_t = time_global() + (self.t_t/self.st.time_f)
		end
		self.t_t = nil
	end
	if self.time_t and self.time_t <= time_global() then
		self.time_t = nil
		self.enb = false
	end
	self.delay = time_global() + 3000
	return self.enb or false
end

class "action_drink" (action_base)
function action_drink:__init (npc,action_name,storage) super (nil,action_name)
	self.st = storage
end
function action_drink:initialize()
	action_base.initialize(self)
end
function action_drink:execute()
	action_base.execute(self)
	local npc = self.object
	if self.st.rand == 1 then
		if state_mgr.get_state(npc) ~= "sleep" and state_mgr.get_state(npc) ~= "eat_vodka" then
			state_mgr.set_state(npc,"sleep",nil,nil,nil,{animation = true})
			if not self.st.poh then
				self.st.poh = true
			end
		end
	elseif self.st.rand == 2 then
		if state_mgr.get_state(npc) ~= "sleep_sit" and state_mgr.get_state(npc) ~= "eat_vodka" then
			state_mgr.set_state(npc,"sleep_sit",nil,nil,nil,{animation = true})
			if not self.st.poh then
				self.st.poh = true
			end
		end
	end
end
function action_drink:finalize()
	action_base.finalize(self)
end

class "evaluator_poh" (property_evaluator)
function evaluator_poh:__init(npc,name,storage) super (nil,name)
	self.st = storage
	if self.st.rand == 1 then
		self.p_t = (1000*60*5)
	elseif self.st.rand == 2 then
		self.p_t = (1000*60)
	elseif self.st.rand == 3 then
		self.p_t = (1000*30)
	end
end
function evaluator_poh:evaluate()
	if self.st.poh then
		self.poh_t = time_global() + (self.p_t/self.st.time_f)
	end
	if self.poh_t and self.poh_t <= time_global() then
		self.st.poh = nil
	end
	return self.st.poh or false
end

class "action_poh" (action_base)
function action_poh:__init (npc,action_name,storage) super (nil,action_name)
end
function action_poh:initialize()
	action_base.initialize(self)
end
function action_poh:execute()
	action_base.execute(self)
	local npc = self.object
	if state_mgr.get_state(npc) ~= "psycho_pain" then
		state_mgr.set_state(npc,"psycho_pain",nil,nil,nil,{animation = true})
	end
end
function action_poh:finalize()
	action_base.finalize(self)
end

evid_drink = mon_ai.evid_mon_base + 6
actid_drink = evid_drink
evid_poh = mon_ai.evid_mon_base + 7
actid_poh = evid_poh

function add_to_binder(npc,ini,scheme,section,storage)
	local manager = npc:motivation_action_manager()
	local com = npc:character_community()
	local aaa = true
	if mon_utils.urodi[npc:name()] then
		aaa = nil
	end
	if com == "zombied" or com == "arena_enemy" or com == "trader" or not aaa or npc:story_id() ~= 4294967296 then
		manager:add_evaluator(evid_drink,property_evaluator_const(false))
		manager:add_evaluator(evid_poh,property_evaluator_const(false))
		return
	end
	manager:add_evaluator(evid_drink,evaluator_drink(npc,"eva_drink",storage))
	manager:add_evaluator(evid_poh,evaluator_poh(npc,"eva_poh",storage))
	local action = action_drink(npc,"act_drink",storage)
	action:add_precondition(world_property(stalker_ids.property_alive,true))
	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
	action:add_precondition(world_property(evid_drink,true))
	action:add_effect(world_property(evid_drink,false))
	manager:add_action(actid_drink,action)
	action = action_poh(npc,"act_poh",storage)
	action:add_precondition(world_property(stalker_ids.property_alive,true))
	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
	action:add_precondition(world_property(evid_poh,true))
	action:add_effect(world_property(evid_poh,false))
	manager:add_action(actid_poh,action)
	action = manager:action(xr_actions_id.alife)
	action:add_precondition(world_property(evid_drink,false))
	action:add_precondition(world_property(evid_poh,false))
end

function set_scheme(npc,ini,scheme,section)
	local st = xr_logic.assign_storage_and_bind(npc,ini,scheme,section)
end

function disable_scheme(npc, scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end
